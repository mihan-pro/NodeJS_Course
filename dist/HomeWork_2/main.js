"use strict";var _express=_interopRequireDefault(require("express"));var _joi=_interopRequireDefault(require("joi"));var _createUser=require("./helpers/createUser");var _pg=require("pg");var _sequelize=require("sequelize");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const usersMock=[(0,_createUser.createUser)('Mikhai','pass',26),(0,_createUser.createUser)('Yuriy','pass22',26),(0,_createUser.createUser)('Dmitro','pa2124ss',26),(0,_createUser.createUser)('Gypsy','horse212',26),(0,_createUser.createUser)('Adam','querty',26),(0,_createUser.createUser)('nagibator','pqdassq',26),(0,_createUser.createUser)('Olly','pawerts',26),(0,_createUser.createUser)('Zizu','1231dev',26),(0,_createUser.createUser)('Aziz','pasqwdq__1s',26)];const client=new _pg.Client({port:5432,host:'localhost',database:'postgres',user:'postgres'});client.connect().then(()=>console.log('success')).catch(err=>console.log(err));client.query("CREATE TABLE IF NOT EXISTS Users(id UUID, login TEXT, password TEXT, age INTEGER, is_deleted BOOL)").then(()=>console.log('Users table is ready to use')).catch(err=>console.log(err));client.query("DELETE FROM Users").then(()=>console.log("Users table was cleared")).catch(err=>console.log(err));usersMock.forEach(({id,login,password,age,is_deleted})=>{client.query("INSERT INTO Users (id, login, password, age, is_deleted) VALUES ($1, $2, $3, $4, $5)",[id,login,password,age,is_deleted]).then(()=>console.log(`User: ${login} was successfuly added`)).catch(err=>console.log(err));});const sequelize=new _sequelize.Sequelize('postgres://localhost:5432/postgres');sequelize.authenticate().then(()=>console.log('Sequelize success')).catch(err=>console.log(err));const Users=sequelize.define('users',{id:{type:_sequelize.DataTypes.UUID,allowNull:false,primaryKey:true},login:{type:_sequelize.DataTypes.STRING,allowNull:false},password:{type:_sequelize.DataTypes.STRING,allowNull:false},age:{type:_sequelize.DataTypes.NUMBER,allowNull:false},is_deleted:{type:_sequelize.DataTypes.BOOLEAN,allowNull:false}},{updatedAt:false,createdAt:false});Users.create((0,_createUser.createUser)('Joseph','NewYork4',88)).then(()=>console.log('was added successfully')).catch(err=>console.log(err));const port=3000;const server=(0,_express.default)();server.use(_express.default.json());const schema=_joi.default.object({login:_joi.default.string().min(3).required(),password:_joi.default.string().min(8).pattern(/^(?=.*[a-zA-Z])(?=.*\d)/).required(),age:_joi.default.number().min(4).max(130).required()});server.get('/getAllUsers',async(req,res)=>{const users=await Users.findAll();res.end(JSON.stringify(users));});server.post('/create',async(req,res)=>{try{const{login,password,age}=req.body;const{error}=schema.validate(req.body);if(error){res.status(400);res.end(JSON.stringify(error.message,null,2));return;}await Users.create((0,_createUser.createUser)(login,password,age));res.status(200);res.end('ok');}catch(err){res.status(400);res.end(err);}});server.get('/getUser/:id',async(req,res)=>{try{const{id:requestedId}=req.params;console.log(requestedId);const user=await Users.findOne({where:{id:requestedId}});console.log(user);if(user){res.status(200);res.end(JSON.stringify(user));}else{res.status(404);res.end('The user hadn\'t been found');}}catch(err){res.status(500);res.end(err);}});server.patch('/updateUser/:id',async(req,res)=>{try{const{id:requestedId}=req.params;const{error}=schema.validate(req.body);if(error){res.status(400);res.end(JSON.stringify(error.message,null,2));return;}const{login,password,age}=req.body;const result=await Users.update({login,password,age},{where:{id:requestedId}});if(result[0]){res.status(200);res.send('ok');res.end();}else{res.status(404);res.end('The user hadn\'t been found');}}catch(err){res.status(500);res.end(err);}});server.delete('/deleteUser/:id',async(req,res)=>{try{const{id:requestedId}=req.params;const result=await Users.destroy({where:{id:requestedId}});if(result){res.status(200);res.end();}else{res.status(404);res.end('The user hadn\'t been found');}}catch(err){res.status(500);res.end(err);}});server.listen(port,()=>{console.log(`Server started on port ${3000}`);});